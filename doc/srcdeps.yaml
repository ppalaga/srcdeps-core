#
# Copyright 2015-2019 Maven Source Dependencies
# Plugin contributors as indicated by the @author tags.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# `srcdeps.yaml` - the srcdeps configuration file.
#
# The full srcdeps.yaml reference can be found under https://github.com/srcdeps/srcdeps-core/tree/master/doc/srcdeps.yaml
#
# Note that the options set here can be overriden on the command line,
# see https://github.com/srcdeps/srcdeps-maven/blob/master/README.adoc#override-mvnsrcdepsyaml-options-on-the-command-line
#
# This file has to be located in the root directory of a Maven or
# Gradle source tree. Before version 3.1.0 of `srcdeps-maven` the location for Maven was `.mvn/srcdeps.yaml` and it is
# still supported.


# `configModelVersion` exists to track the changes in the schema of the srcdeps.yaml file.
#
# = configModelVersion compatibility matrix
#
#  srcdeps-core | srcdeps-maven | Compatible configModelVersions
# --------------+---------------+--------------------------------
#  2.0.0        | 2.0.0         | 1.0
#  2.1.0        | 2.1.0         | 1.1, 1.0
#  3.0.x        | 3.0.x         | 2.0
#  3.1.x        | 3.1.x         | 2.1, 2.0
#  3.2.x        | 3.2.x         | 2.2, 2.1, 2.0
#  3.3.x        | 3.3.x         | 2.3, 2.2, 2.1, 2.0
#  4.0.x        | 3.4.x         | 2.4, 2.3, 2.2, 2.1, 2.0
#  4.1.x        | 3.5.x         | 2.5, 2.4, 2.3, 2.2, 2.1, 2.0
#
# Required, no default
# Since 1.0
configModelVersion: 2.5

# `forwardProperties` - a list of property names that the top level builder A should pass as java system properties to
# every dependency builder B using `-DmyProperty=myValue` style command line arguments. Further, in case a child
# builder B spawns its own new child builder C, B must pass all these properties to C in the very same
# manner as A did to B.
#
# A property name may end with asterisk `*` to denote that all properties starting with the part before the
# asterisk should be forwared. E.g. `my.prop.*` would forward both `my.prop.foo` and
# `my.prop.bar`.
#
# Optional, default: srcdeps.masterConfig, srcdeps.maven.*
# Since 1.0
forwardProperties:
- myForwardProperty

# `forwardAsMasterConfig` - if `true` the URI of the current `srcdeps.yaml` file will be forwarded as a system property
# `srcdeps.masterConfig` to every dependency builder thus effectively replacing any `srcdeps.yaml` configuration
# available in the dependency source tree. See also `forwardProperties` above.
#
# Optional, default: false
# Since 2.4
forwardAsMasterConfig: false

# `builderIo` - a triple of definitions how to handle the three standard I/O steams of the child builder
# process. The syntax of the definitions mostly follows the semantics of
# `java.lang.ProcessBuilder.Redirect`.
#
# Possible values:
# * `inherit` - use the I/O of the parent process; applicable to all three streams
# * `read:/path/to/input/file` - use the specified file for input; applicable to stdin
# * `write:/path/to/output/file` - use the specified file for output; applicable to stdout and stderr
# * `append:/path/to/output/file` - use the specified file for output; applicable to stdout and stderr
# * `err2out` - redirect `stderr` to `stdout`; applicable to stderr
#
# Optional, default is inherit all.
# Since 1.0
builderIo:
  stdin: inherit
  stdout: inherit
  stderr: inherit

# `skip` - skip the srcdeps processing altogether
#
# Optional, default: false
# Since 1.0
skip: false

# `sourcesDirectory` - A directory where the dependency sources should be checked out. Each SCM repository
# will have a subdirectory named after its `id` there.
#
# Optional, default: `${maven.repo.local}/../srcdeps/` - i.e. usually `~/.m2/srcdeps`
# Since 1.0
sourcesDirectory: ~/.m2/srcdeps

# `verbosity` - the verbosity level the appropriate dependency build tool (such as Maven) should use
# during the build of a dependency. The interpretation of the individual levels is up to the given build
# tool. Some build tools may map the levels listed here to a distinct set of levels they support
# internally.
#
# Possible values: error, warn, info, debug, trace
#
# Optional, default: warn
# Since 1.0
verbosity: warn

# `buildTimeout` - the maximal time duration a build of a source dependency can take. When this value is
# overrun, the build is terminated forcibly and the outer build fails too. Note that this value can be
# overriden at the repository level - see below.
#
# Valid values consist of a number followed by a time unit abbreviation. Valid time unit abbreviations are:
# * ns - nanoseconds
# * us - microseconds
# * ms - milliseconds
# * s  - seconds
# * m  - minutes
# * h  - hours
# * d  - days
#
# Examples: 10s, 15m, 2h
#
# Optional, default: 0x8000000000000000ms which is Long.MAX_VALUE milliseconds
# Since 2.0
buildTimeout: 14d

# `buildVersionPattern` and `buildRef` represent a an alternative to defining source dependencies in pom.xml files
# or Gradle scripts.
#
# In pom.xml, you would define your source dependency by using a special infix `-SRC-` followed by a
# `<refType>-<refname>` pair - something like
#
#     <dependency>
#       <groupId>org.my-org</groupId>
#       <artifactId>my-artifact</artifactId>
#       <version>0.0.1-SRC-revision-66ea95d890531f4eaaa5aa04a9b1c69b409dcd0b</version>
#     </dependency>
#
# `buildVersionPattern` and `buildRef` of `srcdeps.yaml`  can be used to reach a similar result.
#
# `buildVersionPattern` is a regular expression to apply on versions of dependencies. In case of a match, the given
# dependency is rebuilt based on `buildRef`.
#
# `buildVersionPattern` and `buildRef` are especially useful if you cannot or do not want to change pom.xml files.
# Most notably they can be used to rebuild SNAPSHOTS - e.g. to rebuild any SNAPSHOT dependency, you could use
#
#     buildVersionPattern: .*-SNAPSHOT
#
# In case you have both `-SRC-` in the `pom.xml` or `build.gradle` version of an artifact and a matching
# `buildVersionPattern` in `srcdeps.yaml`, the settings in `pom.xml` or `build.gradle` have a higher precedence.
#
# `buildVersionPattern` and `buildRef` can be overriden on the source repository level - see `buildRef` and
# `buildVersionPattern` under `repositories` below.
#
# Optional, default: null
# Since 2.3
buildVersionPattern: .*-SNAPSHOT

# `buildRef` - a SCM reference to use when building dependencies triggered by `buildVersionPattern`.
#
# `buildRef` can be overriden on the source repository level - see `buildRef` under `repositories` below.
#
# Format: `<refType>-<refname>` where:
#
# * `<refType>` is one of `revision`, `branch` or `tag`
# * `<refName>` is an actual commitID, branch name or tag name
#
# Examples: revision-a867be19904e21e312ca3208dac42ab7a7de5c59, branch-3.x, tag-1.2.3
#
# Optional, default: branch-master
# Since 2.3
buildRef: branch-master

# `maven` - Maven specific settings that apply both on the top level and for each source repository
# (unless they are overriden at the repository level).
#
# Optional, see the individual attributes for their respective defaults
# Since 2.0
maven:

  # `versionsMavenPluginVersion` - the version of `org.codehaus.mojo:versions-maven-plugin` to use
  # when setting versions in source trees to prepare them for the building of a dependency.
  #
  # Optional, default: 2.3
  # Since 2.0
  versionsMavenPluginVersion: 2.3

  # `failWith` - a configuration node to define conditions whose presence will make the outer Maven build fail
  # as long as it has source dependencies.
  #
  # The introduction of `failWith` settings was motivated by the need to avoid releases with source
  # dependencies - that is why the default failWith goals are `release:prepare` and `release:perform`.
  #
  # Note that for Maven, you need to add the `srcdeps-maven-enforcer` to `.mvn/extensions.xml` - see the
  # link:https://github.com/srcdeps/srcdeps-maven/blob/master/srcdeps-maven-quickstarts/srcdeps-mvn-git-revision-quickstart/.mvn/extensions.xml#L31-L35[Srcdeps Git Revision Quickstart].
  #
  # We emphasize, that these settings are effective only if source dependencies exist in the outer
  # project. In case there are no source dependencies there, the build will not fail even if any of
  # the configured goals, profiles or properties are present.
  #
  # Note that the goals, profiles and properties set below are combined with with the logical `OR` - i.e.
  # the build will fail if one or more of the goals, profiles or properties are present in the outer build.
  #
  # Optional, see the individual attributes for their respective defaults
  # Since 2.0
  failWith:

    # `addDefaults` - if `true`, the default failWith goals (`release:prepare` and `release:perform`) will
    # be prepended to goals configured in the `goals` attribute below. Otherwise, the default failWith goals
    # will be disregared and only the list present in `goals` attribute  will will be effective.
    #
    # Optional, default: true
    # Since 2.0
    addDefaults: true

    # `goals` - a list of Maven goals that should make the outer build fail if they are present and the outer
    # build has source dependencies. The goals can be either in the short form, e.g. `release:prepare`, or
    # in the fully qualified form, e.g. `org.my-group:my-plugin:my-mojo`
    #
    # Optional, see `addDefaults` above for defaults
    # Since 2.0
    goals:
    - my-breaker-goal

    # `profiles` - a list of Maven profile IDs that should make the outer build fail if they are present and
    # the outer build has source dependencies.
    #
    # Optional, no default
    # Since 2.0
    profiles:
    - my-breaker-profile

    # `properties` - a list of Maven properties that should make the outer build fail if they are present
    # and the outer build has source dependencies. The list can contain either bare property names (in which
    # case a mere property presence will make the build fail) or name=value pairs (in which case the build
    # will only fail if the named property has the given value).
    #
    # Optional, no default
    # Since 2.0
    properties:
    - my-bare-breaker-property
    - my-breaker-property=my-breaker-value

  # `failWithout` - a configuration node to define conditions whose absence will make the outer Maven build fail
  # as long as it has source dependencies.
  #
  # The introduction of `failWithout` settings was motivated by the need to allow dependencies under some
  # specific circumstances but disallow them in all other cases. E.g. to allow source dependencies only in a CI job
  # that builds pull requests, you may choose some property name, say `srcdeps.enabled` and use it in `failWithout`:
  #
  #     failWithout:
  #       properties:
  #       - srcdeps.enabled
  #
  # Then, to opt-in the CI job that is allowed to use source dependencies, just pass `-Dsrcdeps.enabled` to `mvn`
  # command. The CI job will succeed in using source dependencies, but all other invocations of `mvn` without
  # `-Dsrcdeps.enabled` will fail.
  #
  # Note that for Maven, you need to add the `srcdeps-maven-enforcer` to `.mvn/extensions.xml` - see the
  # link:https://github.com/srcdeps/srcdeps-maven/blob/master/srcdeps-maven-quickstarts/srcdeps-mvn-git-revision-quickstart/.mvn/extensions.xml#L31-L35[Srcdeps Git Revision Quickstart].
  #
  # We emphasize, that these settings are effective only if source dependencies exist in the outer
  # project. In case there are no source dependencies there, the build will not fail even if any of
  # the configured goals, profiles or properties are present.
  #
  # Note that the goals, profiles and properties set below are combined with with the logical `OR` - i.e.
  # the build will fail if one or more of the goals, profiles or properties are not present in the outer build.
  #
  # Optional, see the individual attributes for their respective defaults
  # Since 2.1
  failWithout:

    # `goals` - a list of Maven goals that should make the outer build fail if they are not present and the outer
    # build has source dependencies. The goals can be either in the short form, e.g. `release:prepare`, or
    # in the fully qualified form, e.g. `org.my-group:my-plugin:my-mojo`
    #
    # Optional, no default
    # Since 2.1
    goals:
    - my-enabler-goal

    # `profiles` - a list of Maven profile IDs that should make the outer build fail if they are not present and
    # the outer build has source dependencies.
    #
    # Optional, no default
    # Since 2.1
    profiles:
    - my-enabler-profile

    # `properties` - a list of Maven properties that should make the outer build fail if they are not present
    # and the outer build has source dependencies. The list can contain either bare property names (in which
    # case a mere property presence checked) or name=value pairs (in which case both name and the value need to
    # match).
    #
    # Optional, no default
    # Since 2.1
    properties:
    - my-bare-enabler-property
    - my-enabler-property=my-enabler-value

# `repositories` - a map of source repositories to checkout and build from
#
# Required, no default
# Since 1.0
repositories:

  # the `id` of the source repository, typically the `groupId` of its artifacts,
  # or any other string unique at this level of the yaml file.
  org.l2x6.maven.srcdeps.itest:

    # `includes` - select which dependency artifacts should be built from this source repository.
    #
    # An include is a pattern to match dependency GAVs (triples of groupId, artifactId and version) against. An include
    # has three colon delimited subpatterns, one for each of groupId, artifactId and version. The subpatterns for
    # artifactId and version can be omitted. The subpatterns may contain the wildcard * that stands for a number
    # of characters or an empty string.
    #
    # = examples of includes:
    #
    # `org.my-group`             an equivalent of `org.my-group:*:*`. It will match any version of any artifact
    #                            having groupId `org.my-group`.
    #
    # `org.my-group*`            an equivalent of `org.my-group*:*:*`. It will match any version of any artifact
    #                            whose groupId starts with `org.my-group` - i.e. it will match all of `org.my-group`,
    #                            `org.my-group.api`, `org.my-group.impl`, etc.
    #
    # `org.my-group:my-artifact` an equivalent of `org.my-group:my-artifact:*`. It will match any version of all such
    #                            artifacts that have groupId `org.my-group` and artifactId `my-artifact`
    #
    # `org.my-group:my-artifact:1.2.3` will match just the version 1.2.3 of artifacts `org.my-group:my-artifact`.
    #
    # At least one include is required
    # Since 2.2
    #
    # Note that `includes` has the same meaning as `selectors` that existed since 1.0. `selectors` is still kept as an
    # alias for `includes`.
    #
    # Note that in configModelVersion: 1.0, selectors consisted only of groupId literals to perform exact string match
    # with the `groupId` of the dependency. Because the subpatterns for artifactId and version can be omitted since 1.1
    # the 1.1 selectors are backward compatible with 1.0 selectors.
    #
    includes:
    - org.l2x6.maven.srcdeps.itest # This SCM repository entry will be used for building artifacts
                                   # with groupId org.l2x6.maven.srcdeps.itest (unless the given artifact is excluded
                                   # by `excludes`)

    # `excludes` - exclude dependency artifacts out of the set of artifacts that should be built from this source
    # repository.
    #
    # Syntax of `excludes` is the same as `includes`.
    #
    # Optional, default is an empty list
    # Since 2.2
    #
    excludes:
    - org.l2x6.maven.srcdeps.itest:my-artifact # All artifacts with groupId `org.l2x6.maven.srcdeps.itest` and
                                               # `artifactId my-artifact` are hereby marked as not having their source
                                               # code in this source repository.

    # `urls` - a list of URLs to checkout the sources of the given dependency. If you list multiple SCM
    # repositories here then only the first successful checkout will count.
    #
    # At least one URL is required
    # Since 1.0
    urls:
    - git:https://github.com/srcdeps/srcdeps-test-artifact.git

    # Appended to the list of build tool specific default build arguments. To override the given
    # build tool's defaults, see addDefaultBuildArguments
    #
    # Optional, defaults for maven: `clean install`
    # Since 1.0
    buildArguments:
    - -Dcheckstyle.skip=true
    - -Dlicense.skip=true # for skipping the tests, see `skipTests` below, that is BTW `true` by default

    # `addDefaultBuildArguments` - if true, the build tool's default arguments will be used when building
    # a dependency. Otherwise, no default build arguments will be used. The default build arguments are
    # build tool specific.
    #
    # For Maven, the default build arguments are `clean install`.
    #
    # Optional, default: true
    # Since 1.0
    addDefaultBuildArguments: true

    # `skipTests` - if set to `true` no tests will be run when building a dependency. For dependencies built
    # with Maven, this accounts to adding `-DskipTests` to the `mvn` arguments.
    #
    # Optional, default: true
    # Since 1.0
    skipTests: true

    # `buildTimeout` - the maximal time duration a build of the source tree checked out from this repository
    #  can take. When this value is overrun, the build is terminatet forcibly and the outer build fails too.
    # This value overrides the `buildTimeout` set at the top level of this file - see above for valid duration
    # formats.
    #
    # Examples: 10s, 15m, 2h
    #
    # Optional, default: inherited from the top level `buildTimeout`
    # Since 2.0
    buildTimeout: 14d

    # `builderIo` - a triple of definitions how to handle the three standard I/O steams of the child builder
    # process. See `builderIo` at the top level of this file for syntax and other details.
    #
    # Optional, default: inherited from the top level `builderIo`
    # Since 2.0
    builderIo:
      stdin: inherit
      stdout: inherit
      stderr: inherit

    # `verbosity` - the verbosity level the appropriate dependency build tool (such as Maven) should use
    # during the build of a dependency from this repository. See `builderIo` at the top level of this file
    # for syntax and other details.
    #
    # Optional, default: inherited from the top level `verbosity`
    # Since 2.0
    verbosity: warn

    # `buildVersionPattern` - a regular expression to apply on version strings of artifacts belonging to this
    # source repository. In case of a match, this source repository will be rebuilt using `buildRef`.
    #
    # For more information, please refer to the top level `buildVersionPattern` property.
    #
    # Optional, default: inherited from the top level `buildVersionPattern`
    # Since 2.3
    buildVersionPattern: .*-SNAPSHOT

    # `buildRef` - a SCM reference to use when building dependencies triggered by `buildVersionPattern`.
    #
    # `buildRef` can be overriden on the source repository level - see `buildRef` under `repositories` below.
    #
    # Format: `<refType>-<refname>` where:
    #
    # * `<refType>` is one of `revision`, `branch` or `tag`
    # * `<refName>` is an actual commitID, branch name or tag name
    #
    # Examples: revision-a867be19904e21e312ca3208dac42ab7a7de5c59, branch-3.x, tag-1.2.3
    #
    # Optional, default: inherited from the top level `buildVersionPattern`
    # Since 2.3
    buildRef: branch-master

    # `maven` - Maven specific settings for this source repository.
    #
    # Optional, with defaults for the individual attributes of `maven`
    # Since 2.0
    maven:

      # `versionsMavenPluginVersion` - the version of `org.codehaus.mojo:versions-maven-plugin` to use when
      # setting versions in this source repository.
      #
      # Optional, if not set, the value is looked up first in maven.versionsMavenPluginVersion above or the
      # hard coded default 2.3 is used
      # Since 2.0
      versionsMavenPluginVersion: 2.3

      # `excludeNonRequired` - if `true` and `includes` is a non-empty list, `srcdeps` will remove uneeded `<module>`
      # elements from `pom.xml` files in the dependency project before building it. Otherwise, the value returned by
      # this method has no effect.
      #
      # The set of uneeded `<module>` elements is defined as follows:
      #
      # * First, the set of artifacts listed in `includes` is used to create a closure under the /is child of/ and
      #   /is dependendent on/ relationships. Building this closure set of Maven modules should be just enough to
      #   produce all dependencies required by the dependent source tree.
      #
      # * Second, the complement of that closure set is created, the universe being the set of all modules in the
      #   dependency source tree. This complement set contains all Maven modules from the dependency source tree which
      #   do not need to be built to produce the artifacts the dependent source tree requires.
      #
      # The unneeded `<module>` elements are removed as follows: The dependency source tree is traversed from the root
      # Maven module following the `<module>` /child/ links. Each encountered `<module>` element is looked up in the set
      # of unneeded modules: if ṕresent there, the given `<module>` element is removed from the `pom.xml` file and the
      # travesal towards that module does not continue.
      #
      # See also `includeRequired` and `includes`
      #
      # Optional, default: false
      # Since 2.5
      excludeNonRequired: false

      # `includeRequired` - if `true` the source tree triggering the build of the given dependency will be scanned
      # for dependencies included via `repository.includes` and `repository.excludes`. These dependencies will then be
      # added to `repository.maven.includes`. Otherwise the source tree triggering the build will not be scanned and no
      # items will be added to {@link #getIncludes()}.
      #
      # See also `includes` and `excludeNonRequired`
      #
      # Optional, default: false
      # Since 2.5
      includeRequired: false

      # `includes` - a list of `groupId:artifactId` identifiers that should be included in the build of the given
      # dependency source tree. The inclusion is achieved by using `-pl` (a.k.a. `--projects`) and `-am` (a.k.a.
      # `--also-make` Maven command line options. If the returned list is empty, no additional Maven CLI options will be
      # used.
      #
      # Using this option directly or via `includeRequired` or in combination with `excludeNonRequired` may speedup
      # the build of dependency projects substantially.
      #
      # See also `includeRequired` and `excludeNonRequired`
      #
      # Optional, default: empty list
      # Since 2.5
      includes:
      - org.example:my-artifact
      - org.other-org:another-artifact


    # `gradle` - Gradle specific settings for this source repository.
    #
    # Optional, with defaults for the individual attributes of `gradle`
    # Since 2.2
    gradle:

      # `modelTransformer` - an URI-like specification of a Gradle script to append to the given dependency project's
      # `settings.gradle`.
      #
      # The `modelTransformer` URI consists of two substantial parts: `<scheme>:<resource>`, where `<scheme>` is one of
      # `classpath`, `file` or `literal` and the meaning of `<resource>` is scheme specific:
      #
      # * For `classpath` scheme, the `<resource>` is a path that will be resolved via
      #   `getClass().getResource(<resource>)`.
      #   Example: `modelTransformer: 'classpath:/gradle/settings/srcdeps-model-transformer.gradle'`
      #
      # * For `file` scheme, the `<resource>` is a file system path relative to the outer project's root directory.
      #   Example: `modelTransformer: 'file:src/build/srcdeps/my-script.gradle'`
      #
      # * For `literal` scheme, the `<resource>` is a string literal to use verbatim as the resource content.
      #   Example: `modelTransformer: 'literal: println "srcdeps rocks!"'`
      #
      # The script depicted by the default URI `classpath:/gradle/settings/srcdeps-model-transformer.gradle` can be seen
      # in the source tree of the respective `srcdeps-core` version:
      #
      # https://github.com/srcdeps/srcdeps-core/tree/3.2.0/srcdeps-core/src/main/resources/gradle/settings/srcdeps-model-transformer.gradle @srcdeps.version@
      #
      # If the default script does not suit your needs, the prefered way to adjust it, is to copy it to your dependent
      # project, ajdust it there and use a `file:` URI with a filesystem path relative to your project's root directory.
      #
      # Optional, default: `classpath:/gradle/settings/srcdeps-model-transformer.gradle`
      # Since 2.0
      modelTransformer: "classpath:/gradle/settings/srcdeps-model-transformer.gradle"
